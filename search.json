[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ricardorenenoe",
    "section": "",
    "text": "Political Economist: Policy Analysis and Investment Consulting"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Assignment #2\n\n#########################################\nrm(list=ls())                          # Clear environment\n\n\n\nhpi_df <- read_csv(\"~/HPI.csv\")\n\nRows: 1064 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, ISO\ndbl (10): HPI rank, year, Continent, Population (thousands), Life Expectancy...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(hpi_df)<-c(\"hpi_rank\",\"country\",\"iso\",\"year\",\n                 \"continent\", \"population\", \"life_expectancy\",\n                 \"ladder_of_life\", \"ecological_footprint\",\n                 \"hpi\", \"biocapacity_for_year\", \"gdp\")\n\nhpi2_df <- na.omit(hpi_df)\n\n## Start plotting from basics \n#  plotting functions.\nyear <- c(2013, 2014, 2015, 2016, 2017, 2018, 2019)\nhpi_score <- aggregate(hpi ~ year, hpi2_df, mean)\nlife_score  <- aggregate(life_expectancy ~ year, hpi2_df, mean)\nhpi_score <- c(hpi_score$hpi)\nlife_score <- c(life_score$life_expectancy)\n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(3, 2))\n\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(year), c(40, 80))\nlines(year, hpi_score)\nlines(year, life_score)\npoints(year, hpi_score, pch=17, bg = \"blue\", cex=1) # Try different cex value?  \npoints(year, life_score, pch=21, bg =\"red\", cex=1)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(2013, 2019, 2)) # What is the first number standing for?\naxis(2, at=seq(40, 80, 10))\naxis(4, at=seq(40, 80, 10))\nbox(bty=\"u\")\nmtext(\"year\", side=1, line=2, cex=0.8)\nmtext(\"HPI\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Life Exp\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n\n######## Histogram ########\n\n# Make sure no Y exceed [-3.5, 3.5]\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(hpi2_df$hpi, breaks=seq(floor(min(hpi2_df$hpi)),\n                             ceiling(max(hpi2_df$hpi))), \n     main=\"Height histogram\", xlab=\"HPI\", \n     col=\"gray80\", freq=FALSE)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n####### Barplot ######\nlibrary(dplyr)\n\n\n\n\n\nsummary(hpi2_df$gdp)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n   751.7   4984.0  12874.5  21034.2  31201.9 114304.0 \n\n\n\nhpi3_df <- hpi2_df %>%\n  mutate(gdp_lev = ifelse(hpi2_df$gdp >= 31202, 'high',\n                           ifelse(hpi2_df$gdp >= 4985, 'middle',\n                                  'low')))\n\nsummary(hpi2_df$hpi)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  22.35   38.32   44.24   44.05   49.88   64.73 \n\n\n\nhpi3_df <- hpi3_df %>%\n  mutate(hpi_lev = ifelse(hpi2_df$hpi > 49, 'good',\n                  ifelse(hpi2_df$hpi > 39, 'average',\n                         'bad')))\n\ngdp_sub_h <- subset(hpi3_df, gdp_lev == \"high\")\naggregate(gdp_lev ~ hpi_lev, gdp_sub_h, length)\n\n  hpi_lev gdp_lev\n1 average     122\n2     bad      50\n3    good      75\n\n\n\ngdp_sub_m <- subset(hpi3_df, gdp_lev == \"middle\")\naggregate(gdp_lev ~ hpi_lev, gdp_sub_m, length)\n\n  hpi_lev gdp_lev\n1 average     223\n2     bad      96\n3    good     175\n\n\n\ngdp_sub_l <- subset(hpi3_df, gdp_lev == \"low\")\naggregate(gdp_lev ~ hpi_lev, gdp_sub_l, length)\n\n  hpi_lev gdp_lev\n1 average      85\n2     bad     134\n3    good      28\n\n\n\nhpi_le <- c(\"average\", \"bad\", \"good\")\nhigh <- c(122, 50, 75)\nmiddle <- c(223, 96, 175)\nlow <- c(85, 134, 28)\n\nbar_df <- data.frame(high, middle, low)\nrownames(bar_df)=hpi_le\n\npar(mar=c(2, 3.1, 2, 2.1))\nmidpts <- barplot(as.matrix(bar_df), names = rep(\"\", 3),\n                  col = c(\"gray\", \"red\", \"blue\"))\nlegend(\"topright\", inset=.02,\n       c(\"average\",\"bad\", \"good\"), fill = c(\"gray\", \"red\", \"blue\"), \n       horiz=FALSE, cex=0.5)\nmtext(\"GDP per capita\", side=3, line=0.0, cex=0.5)\nmtext(sub(\" \", \"\\n\", colnames(bar_df)),\n      at=midpts, side=1, line=0.5, cex=0.5)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n\n###### Boxplot ######\npar(mar=c(2, 4, 1, 0.5))\nboxplot(hpi3_df$hpi ~ hpi3_df$gdp_lev, data = hpi3_df,\n        boxwex = 0.4, at = 1:3 - 0.2,\n        subset= hpi3_df$hpi_lev == \"good\", col=\"blue\",\n        xlab=\"\",\n        ylab=\"HPI\", ylim=c(20,70))\nmtext(\"GDP per capita\", side=1, line=1.8, cex=0.5)\n\nboxplot(hpi3_df$hpi ~ hpi3_df$gdp_lev, data = hpi3_df, add = TRUE,\n        boxwex = 0.4, at = 1:3 + 0.2,\n        subset= hpi3_df$hpi_lev == \"bad\", col=\"red\")\nlegend(\"bottomleft\", inset=.02,\n       c(\"good\",\"bad\"), fill = c(\"blue\", \"red\"), horiz=TRUE, cex=0.5)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n###### Persp ######\npar(mar=c(0.5, 0.5, 0, 0), lwd=0.5)\nx <- y <- seq(-10, 10, length = 50);\nz <- outer(x, y,\n           function(x,y) {\n             r <- sqrt(x^2 + y^2)+3;\n             cos(r)/r\n           });\n\npersp(x, y, z,\n      theta  = 20,        # Rotation about z-axis, in degrees\n      phi    = 30,        # Rotation about x-axis, in degrees\n      expand = 0.5,        # Shrinking/growing of z values\n      shade  = 0.3)\n\n\n\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales <- c(0.11, 0.06, 0.23, 0.11, 0.12, 0.37)\nnames(pie.sales) <- c(\"Africa\", \"Asia\",\n                      \"Europe\", \"Oceania\", \"Others\", \"S.America\")\npie(pie.sales, col = rainbow(7))\n\n\n\n\n\n\nAssignment #3\n\nrm(list=ls()) \n\n## Anscombe (1973) Quartlet\n\n  # Load Anscombe's data\n\n# Create four model objects\nlm1 <- lm(y1 ~ x1, data=anscombe)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nlm3 <- lm(y3 ~ x3, data=anscombe)\nlm4 <- lm(y4 ~ x4, data=anscombe)\n\n## Fancy version (per help file)\n\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(>F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\n\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n\n\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"blue\", pch = 21, bg = \"blue\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"red\", lwd = 1.5)\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\n\n\npar(op)\n\nOver fitting with Finetune\n\nx <- seq(0, 2, by = 0.025)\ny <- 5 + 3*x^2 + 100*x^3 + rnorm(length(x), 0, 50)\nz <- x^2\n\nset.seed(2022)\n\nlinearmodel <- lm(y ~ x) #model fitting\n\ntestx <- seq(1.1, 1.5, by = 0.025)\ntesty <- 5 + 3*testx^2 + 100*(testx)^3 + rnorm(length(testx), 0, 20)\npredict_linear <- predict(linearmodel, list(x= testx)) #prediction on test data set\n\nquadraticmodel <- lm(y~ x + z) #fitting\npredict_quadratic = predict(quadraticmodel, list(x = testx, z = testx^2)) #prediction on test data set\n\nsmoothspline <- smooth.spline(x,y,df = 50) #fitting \npredict_spline <- predict(smoothspline, testx)$y #prediction on test data set\n\nseq <- seq(min(x), max(x), by = 0.001)\npredict <- predict(quadraticmodel, list(x = seq, z = seq^2))\n\npar(mfrow=c(1,1))\nplot(x,y, xlab = \"X\", ylab = \"Y\", main = \"Example of Overfitting with finetune\" )\nabline(linearmodel, col = \"red\", lwd = 1)\nlines(seq,predict, col = \"blue\", lwd = 2)\nlines(smoothspline, col = \"green\", lwd = 2)\n\n\n\n\n\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\nmusic <- read_excel(\"C:/Users/Owner/OneDrive - The University of Texas at Dallas/Classes/6. Fall 2022/EPPS 6356 (Data Visualization)/Sampling Example.xlsx\", \n    col_types = c(\"text\", \"text\", \"numeric\", \n        \"text\", \"numeric\"))\n\n\n\nMusic <- music %>% \n  filter(Political_Party == 0) %>% \n  ggplot(aes(y = Age, x = Vote, colour = Music_Taste)) +\n  geom_point(alpha = 0.3) +\n  theme_bw() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_colour_brewer(palette = \"Set1\") +\n  labs(x = \"Likeliness to Vote\",\n       y = \"Age\",\n       title = \"Likeliness to Vote by Democrats\",\n       subtitle = \"Age, Music Taste and Voting\",\n       caption = Sys.Date())\n\nMusic\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAssignment #5\nCharts\n\nlibrary(ggplot2)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(RColorBrewer)\nmusic <- read_excel(\"C:/Users/Owner/OneDrive - The University of Texas at Dallas/Classes/6. Fall 2022/EPPS 6356 (Data Visualization)/Sampling Example.xlsx\", \n    col_types = c(\"text\", \"text\", \"numeric\", \n        \"text\", \"numeric\"))\n\n#Bar Chart I\np1 <- ggplot(music,\n       aes(x = Music_Taste,\n           group = Political_Party,\n           fill = Political_Party))+\n  scale_fill_brewer(palette = \"Paired\") +\n  geom_bar(position='dodge') +\n  coord_flip() +\n  labs(title = \"Music Taste and Political Party\") +\n  theme_classic()\n\np1\n\n\n\n#Bar Chart II\np2 <- ggplot(music,\n             aes(x = Political_Party,\n                 group = Music_Taste,\n                 fill = Music_Taste))+\n  scale_fill_manual(breaks = c(\"R&B\", \"Pop\", \"Other\", \"Latin\", \"Country\", \"Classical\" ),\n                    values = c(\"lightgreen\", \"lightblue\", \"orange\", \"red\", \"green\", \"purple\")) +\n  geom_bar(position='stack') +\n  labs(title = \"Music and Political Party II\") +\n  theme_classic()\np2\n\n\n\n#Circular Area Chart\n\np3 <- ggplot(music, aes(x = Age, fill = Music_Taste)) +\n  geom_histogram(binwidth = 15, boundary = -7.5) +\n  coord_polar() +\n  scale_x_continuous(limits = c(20, 70)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  xlab(\"Age\")+\n  labs(title = \"Age and Music Taste\")\n\np3\n\nWarning: Removed 46 rows containing non-finite values (`stat_bin()`).\n\n\nWarning: Removed 12 rows containing missing values (`geom_bar()`).\n\n\n\n\n\n\n\nAssignment #6\nApp and Interface\n\n\n\nAssignment #9\n\nlibrary(TSstudio)\nquantmod::getSymbols(\"AAPL\", src=\"yahoo\")\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\n[1] \"AAPL\"\n\nts_plot(AAPL$AAPL.Adjusted, \n        title = \"Apple Stock prices\",\n        Ytitle = \"\")\n\n\n\n\nclass(AAPL) # What class is this object?\n\n[1] \"xts\" \"zoo\"\n\n# Some sample dataset from TSstudio\nts_seasonal(USgas, type = \"box\") # month-year matrix data\n\n\n\n\n# What class is USgas?\n\n# Sample charts\nts_heatmap(USgas)\n\n\n\n\nts_cor(USgas) # ACF and PACF\n\n\n\n\nts_lags(USgas, margin = .01)\n\n\n\n\nusgas=data.frame(USgas)\n\n# Libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Load dataset from github\ndata <- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\ndata$date <- as.Date(data$date)\n\n# Usual area chart\np <- data %>%\n  ggplot( aes(x=date, y=value)) +\n    geom_area(fill=\"#69b3a2\", alpha=0.5) +\n    geom_line(color=\"#69b3a2\") +\n    ylab(\"bitcoin price ($)\") +\n    theme_classic()\n\n# Turn it interactive with ggplotly\np <- ggplotly(p)\np\n\n\n\n\n\n\n\nAssignment #10\nDid not attend, because of work but received access to the code\n\n#Simulation\n# Do a simulation example first -- breaks in a regression, no dynamics\nset.seed(123)\ny1 <- rnorm(50, mean=0, sd=1)     # Break at 50\ny2 <- rnorm(100, mean=2, sd=0.5)  # Break at 150\ny3 <- rnorm(50, mean=-1, sd=2)\ny <- c(y1,y2,y3)\nplot(ts(y))\n\n\n\n# Fit the breakpoint models\nlibrary(strucchange)\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nLoading required package: sandwich\n\n\n\nAttaching package: 'strucchange'\n\n\nThe following object is masked from 'package:stringr':\n\n    boundary\n\n# One break\nsystem.time(M1serial <- breakpoints(y ~ 1, h=0.05, breaks=1))\n\n   user  system elapsed \n   0.03    0.00    0.03 \n\n# Two break model\nsystem.time(M2serial <- breakpoints(y ~ 1, h=0.05, breaks=2))\n\n   user  system elapsed \n   0.19    0.02    0.21 \n\n# Three break model\nsystem.time(M3serial <- breakpoints(y ~ 1, h=0.05, breaks=3))\n\n   user  system elapsed \n   0.35    0.00    0.37 \n\nsummary(M1serial)\n\n\n     Optimal (m+1)-segment partition: \n\nCall:\nbreakpoints.formula(formula = y ~ 1, h = 0.05, breaks = 1)\n\nBreakpoints at observation number:\n           \nm = 1   152\n\nCorresponding to breakdates:\n            \nm = 1   0.76\n\nFit:\n               \nm   0     1    \nRSS 549.9 356.8\nBIC 780.5 704.5\n\nsummary(M2serial)\n\n\n     Optimal (m+1)-segment partition: \n\nCall:\nbreakpoints.formula(formula = y ~ 1, h = 0.05, breaks = 2)\n\nBreakpoints at observation number:\n              \nm = 1      152\nm = 2   50 152\n\nCorresponding to breakdates:\n                 \nm = 1        0.76\nm = 2   0.25 0.76\n\nFit:\n                     \nm   0     1     2    \nRSS 549.9 356.8 234.3\nBIC 780.5 704.5 631.0\n\nsummary(M3serial)\n\n\n     Optimal (m+1)-segment partition: \n\nCall:\nbreakpoints.formula(formula = y ~ 1, h = 0.05, breaks = 3)\n\nBreakpoints at observation number:\n                  \nm = 1      152    \nm = 2   50 152    \nm = 3   50 150 174\n\nCorresponding to breakdates:\n                      \nm = 1        0.76     \nm = 2   0.25 0.76     \nm = 3   0.25 0.75 0.87\n\nFit:\n                           \nm   0     1     2     3    \nRSS 549.9 356.8 234.3 226.3\nBIC 780.5 704.5 631.0 634.7\n\n#RW Intervention Example\nset.seed(1234)\nx <- arima.sim(list(ar=c(0.9, -0.3)), n = 1000, \n               innov = c(rnorm(333), runif(333,-0.5,0.55) + rnorm(333), rnorm(334)))\n\n# Make a pretty plot\nplot(x)\nabline(v = 333, col = \"red\", lwd=2); abline(v=666, col = \"red\", lwd=2)"
  }
]