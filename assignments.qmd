---
title: "Assignments"
editor: visual
---

### Assignment #1

1.  Generative Art

![](https://www.pacegallery.com/media/images/Leo_Villareal_Cosmic_Reef_2.width-1100.png)

Cosmic Reef (Villareal, 2002)

![](https://www.pacegallery.com/media/images/china4_6_20.width-1100.png)

Petro National (China) (Gerrard, 2022)

2.  Fall R

    ```{r}
    # Title Fall color
    # Credit: https://fronkonstin.com

    # Install packages

    library(gsubfn)
    library(tidyverse)

    # Define elements in plant art
    # Each image corresponds to a different axiom, rules, angle and depth

    # Leaf of Fall

    axiom="X"
    rules=list("X"="F-[[X]+X]+F[+FX]-X", "F"="FF")
    angle=22.5
    depth=6


    for (i in 1:depth) axiom=gsubfn(".", rules, axiom)

    actions=str_extract_all(axiom, "\\d*\\+|\\d*\\-|F|L|R|\\[|\\]|\\|") %>% unlist

    status=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))
    points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)


    # Generating data
    # Note: may take a minute or two

    for (action in actions)
    {
      if (action=="F")
      {
        x=points[1, "x1"]+cos(points[1, "alfa"]*(pi/180))
        y=points[1, "y1"]+sin(points[1, "alfa"]*(pi/180))
        points[1,"x2"]=x
        points[1,"y2"]=y
        data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,
                   alfa=points[1, "alfa"],
                   depth=points[1,"depth"]) %>% rbind(points)->points
      }
      if (action %in% c("+", "-")){
        alfa=points[1, "alfa"]
        points[1, "alfa"]=eval(parse(text=paste0("alfa",action, angle)))
      }
      if(action=="["){
        data.frame(x=points[1, "x1"], y=points[1, "y1"], alfa=points[1, "alfa"]) %>%
          rbind(status) -> status
        points[1, "depth"]=points[1, "depth"]+1
      }

      if(action=="]"){
        depth=points[1, "depth"]
        points[-1,]->points
        data.frame(x1=status[1, "x"], y1=status[1, "y"], x2=NA, y2=NA,
                   alfa=status[1, "alfa"],
                   depth=depth-1) %>%
          rbind(points) -> points
        status[-1,]->status
      }
    }

    ggplot() +
      geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),
                   lineend = "round",
                   color="cornflowerblue", 
                   data=na.omit(points)) +
      coord_fixed(ratio = 1) +
      theme_void() # No grid nor axes

    ```

3.  Critique

    -   Article: The Persistence of Rural Underdevelopment: Evidence from Land Reform in Italy by Michael Albertus

    -   Citation: Albertus, M. (2022). The Persistence of Rural Underdevelopment: Evidence from Land Reform in Italy. Comparative Political Studies, 1-36.

    -   Criticism: Figure 7 (Albertus, 2022, p. 26), is difficult to follow and not intuitive unless reading the entire article and attempting to understand the argument brought forward within this article. It would be helpful to understand the purpose of the visualization and what is important about it - without this it is just complex and difficult to understand.

### Assignment #2

```{r}
#########################################
rm(list=ls())                          # Clear environment



hpi_df <- read_csv("~/HPI.csv")

colnames(hpi_df)<-c("hpi_rank","country","iso","year",
                 "continent", "population", "life_expectancy",
                 "ladder_of_life", "ecological_footprint",
                 "hpi", "biocapacity_for_year", "gdp")

hpi2_df <- na.omit(hpi_df)

## Start plotting from basics 
#  plotting functions.
year <- c(2013, 2014, 2015, 2016, 2017, 2018, 2019)
hpi_score <- aggregate(hpi ~ year, hpi2_df, mean)
life_score  <- aggregate(life_expectancy ~ year, hpi2_df, mean)
hpi_score <- c(hpi_score$hpi)
life_score <- c(life_score$life_expectancy)

# Setting the parameter (3 rows by 2 cols)
par(mfrow=c(3, 2))

# Setting label orientation, margins c(bottom, left, top, right) & text size
par(las=1, mar=c(4, 4, 2, 4), cex=.7) 
plot.new()
plot.window(range(year), c(40, 80))
lines(year, hpi_score)
lines(year, life_score)
points(year, hpi_score, pch=17, bg = "blue", cex=1) # Try different cex value?  
points(year, life_score, pch=21, bg ="red", cex=1)  # Different background color
par(col="gray50", fg="gray50", col.axis="gray50")
axis(1, at=seq(2013, 2019, 2)) # What is the first number standing for?
axis(2, at=seq(40, 80, 10))
axis(4, at=seq(40, 80, 10))
box(bty="u")
mtext("year", side=1, line=2, cex=0.8)
mtext("HPI", side=2, line=2, las=0, cex=0.8)
mtext("Life Exp", side=4, line=2, las=0, cex=0.8)
text(4, 5, "Bird 131")
par(mar=c(5.1, 4.1, 4.1, 2.1), col="black", fg="black", col.axis="black")


######## Histogram ########

# Make sure no Y exceed [-3.5, 3.5]
par(mar=c(4.5, 4.1, 3.1, 0))
hist(hpi2_df$hpi, breaks=seq(floor(min(hpi2_df$hpi)),
                             ceiling(max(hpi2_df$hpi))), 
     main="Height histogram", xlab="HPI", 
     col="gray80", freq=FALSE)
par(mar=c(5.1, 4.1, 4.1, 2.1))


####### Barplot ######
library(dplyr)
```

```{r}
summary(hpi2_df$gdp)
```

```{r}
hpi3_df <- hpi2_df %>%
  mutate(gdp_lev = ifelse(hpi2_df$gdp >= 31202, 'high',
                           ifelse(hpi2_df$gdp >= 4985, 'middle',
                                  'low')))

summary(hpi2_df$hpi)
```

```{r}
hpi3_df <- hpi3_df %>%
  mutate(hpi_lev = ifelse(hpi2_df$hpi > 49, 'good',
                  ifelse(hpi2_df$hpi > 39, 'average',
                         'bad')))

gdp_sub_h <- subset(hpi3_df, gdp_lev == "high")
aggregate(gdp_lev ~ hpi_lev, gdp_sub_h, length)
```

```{r}
gdp_sub_m <- subset(hpi3_df, gdp_lev == "middle")
aggregate(gdp_lev ~ hpi_lev, gdp_sub_m, length)
```

```{r}
gdp_sub_l <- subset(hpi3_df, gdp_lev == "low")
aggregate(gdp_lev ~ hpi_lev, gdp_sub_l, length)
```

```{r}
hpi_le <- c("average", "bad", "good")
high <- c(122, 50, 75)
middle <- c(223, 96, 175)
low <- c(85, 134, 28)

bar_df <- data.frame(high, middle, low)
rownames(bar_df)=hpi_le

par(mar=c(2, 3.1, 2, 2.1))
midpts <- barplot(as.matrix(bar_df), names = rep("", 3),
                  col = c("gray", "red", "blue"))
legend("topright", inset=.02,
       c("average","bad", "good"), fill = c("gray", "red", "blue"), 
       horiz=FALSE, cex=0.5)
mtext("GDP per capita", side=3, line=0.0, cex=0.5)
mtext(sub(" ", "\n", colnames(bar_df)),
      at=midpts, side=1, line=0.5, cex=0.5)

par(mar=c(5.1, 4.1, 4.1, 2.1))  


###### Boxplot ######
par(mar=c(2, 4, 1, 0.5))
boxplot(hpi3_df$hpi ~ hpi3_df$gdp_lev, data = hpi3_df,
        boxwex = 0.4, at = 1:3 - 0.2,
        subset= hpi3_df$hpi_lev == "good", col="blue",
        xlab="",
        ylab="HPI", ylim=c(20,70))
mtext("GDP per capita", side=1, line=1.8, cex=0.5)

boxplot(hpi3_df$hpi ~ hpi3_df$gdp_lev, data = hpi3_df, add = TRUE,
        boxwex = 0.4, at = 1:3 + 0.2,
        subset= hpi3_df$hpi_lev == "bad", col="red")
legend("bottomleft", inset=.02,
       c("good","bad"), fill = c("blue", "red"), horiz=TRUE, cex=0.5)
par(mar=c(5.1, 4.1, 4.1, 2.1))

###### Persp ######
par(mar=c(0.5, 0.5, 0, 0), lwd=0.5)
x <- y <- seq(-10, 10, length = 50);
z <- outer(x, y,
           function(x,y) {
             r <- sqrt(x^2 + y^2)+3;
             cos(r)/r
           });

persp(x, y, z,
      theta  = 20,        # Rotation about z-axis, in degrees
      phi    = 30,        # Rotation about x-axis, in degrees
      expand = 0.5,        # Shrinking/growing of z values
      shade  = 0.3)

par(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)


# Piechart
par(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)
pie.sales <- c(0.11, 0.06, 0.23, 0.11, 0.12, 0.37)
names(pie.sales) <- c("Africa", "Asia",
                      "Europe", "Oceania", "Others", "S.America")
pie(pie.sales, col = rainbow(7))
```

### Assignment #3

```{r}
rm(list=ls()) 

## Anscombe (1973) Quartlet

  # Load Anscombe's data

# Create four model objects
lm1 <- lm(y1 ~ x1, data=anscombe)
lm2 <- lm(y2 ~ x2, data=anscombe)
lm3 <- lm(y3 ~ x3, data=anscombe)
lm4 <- lm(y4 ~ x4, data=anscombe)

## Fancy version (per help file)

ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))

# Plot using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  ## or   ff[[2]] <- as.name(paste0("y", i))
  ##      ff[[3]] <- as.name(paste0("x", i))
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
  print(anova(lmi))
}
```

```{r}
sapply(mods, coef)  # Note the use of this function
```

```{r}
lapply(mods, function(fm) coef(summary(fm)))
```

```{r}
# Preparing for the plots
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))

# Plot charts using for loop
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "blue", pch = 21, bg = "blue", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13))
  abline(mods[[i]], col = "red", lwd = 1.5)
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
```

```{r}
par(op)
```

Over fitting with Finetune

```{r}


x <- seq(0, 2, by = 0.025)
y <- 5 + 3*x^2 + 100*x^3 + rnorm(length(x), 0, 50)
z <- x^2

set.seed(2022)

linearmodel <- lm(y ~ x) #model fitting

testx <- seq(1.1, 1.5, by = 0.025)
testy <- 5 + 3*testx^2 + 100*(testx)^3 + rnorm(length(testx), 0, 20)
predict_linear <- predict(linearmodel, list(x= testx)) #prediction on test data set

quadraticmodel <- lm(y~ x + z) #fitting
predict_quadratic = predict(quadraticmodel, list(x = testx, z = testx^2)) #prediction on test data set

smoothspline <- smooth.spline(x,y,df = 50) #fitting 
predict_spline <- predict(smoothspline, testx)$y #prediction on test data set

seq <- seq(min(x), max(x), by = 0.001)
predict <- predict(quadraticmodel, list(x = seq, z = seq^2))

par(mfrow=c(1,1))
plot(x,y, xlab = "X", ylab = "Y", main = "Example of Overfitting with finetune" )
abline(linearmodel, col = "red", lwd = 1)
lines(seq,predict, col = "blue", lwd = 2)
lines(smoothspline, col = "green", lwd = 2)
```

```{r}
library(readxl)
library(ggplot2)
library(tidyverse)

music <- read_excel("C:/Users/Owner/OneDrive - The University of Texas at Dallas/Classes/6. Fall 2022/EPPS 6356 (Data Visualization)/Sampling Example.xlsx", 
    col_types = c("text", "text", "numeric", 
        "text", "numeric"))



Music <- music %>% 
  filter(Political_Party == 0) %>% 
  ggplot(aes(y = Age, x = Vote, colour = Music_Taste)) +
  geom_point(alpha = 0.3) +
  theme_bw() +
  geom_smooth(method = "lm", se = FALSE) +
  scale_colour_brewer(palette = "Set1") +
  labs(x = "Likeliness to Vote",
       y = "Age",
       title = "Likeliness to Vote by Democrats",
       subtitle = "Age, Music Taste and Voting",
       caption = Sys.Date())

Music
```

### Assignment #5

Charts

```{r}
library(ggplot2)
library(ggplot2)
library(tidyverse)
library(readxl)
library(RColorBrewer)
music <- read_excel("C:/Users/Owner/OneDrive - The University of Texas at Dallas/Classes/6. Fall 2022/EPPS 6356 (Data Visualization)/Sampling Example.xlsx", 
    col_types = c("text", "text", "numeric", 
        "text", "numeric"))

#Bar Chart I
p1 <- ggplot(music,
       aes(x = Music_Taste,
           group = Political_Party,
           fill = Political_Party))+
  scale_fill_brewer(palette = "Paired") +
  geom_bar(position='dodge') +
  coord_flip() +
  labs(title = "Music Taste and Political Party") +
  theme_classic()

p1

#Bar Chart II
p2 <- ggplot(music,
             aes(x = Political_Party,
                 group = Music_Taste,
                 fill = Music_Taste))+
  scale_fill_manual(breaks = c("R&B", "Pop", "Other", "Latin", "Country", "Classical" ),
                    values = c("lightgreen", "lightblue", "orange", "red", "green", "purple")) +
  geom_bar(position='stack') +
  labs(title = "Music and Political Party II") +
  theme_classic()
p2

#Circular Area Chart

p3 <- ggplot(music, aes(x = Age, fill = Music_Taste)) +
  geom_histogram(binwidth = 15, boundary = -7.5) +
  coord_polar() +
  scale_x_continuous(limits = c(20, 70)) +
  scale_fill_brewer(palette = "Set2") +
  xlab("Age")+
  labs(title = "Age and Music Taste")

p3

```

### Assignment #6

App and Interface![](images/Shiny-01.png)

![](images/Interface.png)

### Assignment #9

```{r}
library(TSstudio)
quantmod::getSymbols("AAPL", src="yahoo")
ts_plot(AAPL$AAPL.Adjusted, 
        title = "Apple Stock prices",
        Ytitle = "")
class(AAPL) # What class is this object?
# Some sample dataset from TSstudio
ts_seasonal(USgas, type = "box") # month-year matrix data
# What class is USgas?

# Sample charts
ts_heatmap(USgas)
ts_cor(USgas) # ACF and PACF
ts_lags(USgas, margin = .01)
usgas=data.frame(USgas)

# Libraries
library(ggplot2)
library(dplyr)
library(plotly)

# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv", header=T)
data$date <- as.Date(data$date)

# Usual area chart
p <- data %>%
  ggplot( aes(x=date, y=value)) +
    geom_area(fill="#69b3a2", alpha=0.5) +
    geom_line(color="#69b3a2") +
    ylab("bitcoin price ($)") +
    theme_classic()

# Turn it interactive with ggplotly
p <- ggplotly(p)
p
```

### Assignment #10

Did not attend, because of work but received access to the code

```{r}

#Simulation
# Do a simulation example first -- breaks in a regression, no dynamics
set.seed(123)
y1 <- rnorm(50, mean=0, sd=1)     # Break at 50
y2 <- rnorm(100, mean=2, sd=0.5)  # Break at 150
y3 <- rnorm(50, mean=-1, sd=2)
y <- c(y1,y2,y3)
plot(ts(y))

# Fit the breakpoint models
library(strucchange)

# One break
system.time(M1serial <- breakpoints(y ~ 1, h=0.05, breaks=1))

# Two break model
system.time(M2serial <- breakpoints(y ~ 1, h=0.05, breaks=2))

# Three break model
system.time(M3serial <- breakpoints(y ~ 1, h=0.05, breaks=3))

summary(M1serial)
summary(M2serial)
summary(M3serial)


#RW Intervention Example
set.seed(1234)
x <- arima.sim(list(ar=c(0.9, -0.3)), n = 1000, 
               innov = c(rnorm(333), runif(333,-0.5,0.55) + rnorm(333), rnorm(334)))

# Make a pretty plot
plot(x)
abline(v = 333, col = "red", lwd=2); abline(v=666, col = "red", lwd=2)
```
